{"version":3,"sources":["images sync /^/.*$","images/Documents - Shortcut.lnk","images/GreatWaveLayer0.png","images/GreatWaveLayer1.png","images/GreatWaveLayer2.png","images/GreatWaveLayer3.png","images/GreatWaveLayer4.png","images/GreatWaveMobile.png","images/TestGif.gif","resources/ProjectStrings.ts","components/ProjectCard.tsx","components/WavePage.tsx","App.tsx","serviceWorker.js","index.js"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","Project","name","description","this","ProjectStrings","lilBub","newtonOpticks","sethLovesPizza","sethLovesToTalk","ProjectCard","props","className","src","require","imgName","alt","altText","React","Component","WavePage","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.771a8d6a.chunk.js","sourcesContent":["var map = {\n\t\"./Documents - Shortcut.lnk\": 15,\n\t\"./GreatWaveLayer0.png\": 16,\n\t\"./GreatWaveLayer1.png\": 17,\n\t\"./GreatWaveLayer2.png\": 18,\n\t\"./GreatWaveLayer3.png\": 19,\n\t\"./GreatWaveLayer4.png\": 20,\n\t\"./GreatWaveMobile.png\": 21,\n\t\"./TestGif.gif\": 22\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 14;","module.exports = __webpack_public_path__ + \"static/media/Documents - Shortcut.3bef329f.lnk\";","module.exports = __webpack_public_path__ + \"static/media/GreatWaveLayer0.e264fd98.png\";","module.exports = __webpack_public_path__ + \"static/media/GreatWaveLayer1.4d291da8.png\";","module.exports = __webpack_public_path__ + \"static/media/GreatWaveLayer2.24fffb8d.png\";","module.exports = __webpack_public_path__ + \"static/media/GreatWaveLayer3.c72a5495.png\";","module.exports = __webpack_public_path__ + \"static/media/GreatWaveLayer4.18e3f7f9.png\";","module.exports = __webpack_public_path__ + \"static/media/GreatWaveMobile.2faa5012.png\";","module.exports = __webpack_public_path__ + \"static/media/TestGif.292ce0e1.gif\";","class Project{\r\n    constructor(name: string, description: string) {\r\n        this.name = name;\r\n        this.description = description;\r\n    }\r\n\r\n    public name:string = '';\r\n    public description:string = '';\r\n}\r\n\r\nexport default class ProjectStrings {\r\n    public static lilBub = new Project(\r\n        \"Lil Bub's Big Adventure\", \r\n        \"After graduating from college I took a 3 week trip around Europe. I'm not very into taking pictures of myself, so I took a Lil Bub plush and took pictures of that instead. When I came home I had about 300 photos, so I narrowed it down the best ones, and used turn.js to make a digital photo album, complete with collections and my favorites at the end. I really love how it came together and it's a great way to remember what I saw and who I met along my trip.\"\r\n    );\r\n    public static newtonOpticks = new Project(\r\n        \"Newton's Opticks\",\r\n        \"In college I took a class called 'Technologies of Language'. The goal of the class was to look at the effect technology had on interaction with physical media like books, magazines, etc. and what is lost when interacting with physical media through technology. For the final project, we were asked to pick a book from Northwestern's McCormick Library of Special Collections and created a digital version of it. I selected Sir Isaac Newton's Opticks, and created a webpage with original visualizations to highlight word frequency, ligature use, and even a HTML replicate of the cover.\"\r\n    );\r\n    public static sethLovesPizza = new Project(\r\n        \"Seth Loves Pizza\",\r\n        \"A pizza review site that catalyzed the idea for my YouTube channel Seth Loves to Talk. I worked on this for a Hackathon my friends and I did one weekend. I built the site using React and deployed it to sethlovespizza.com to become more familiar with hosting. I used Google Sheets as a database so that updating the site is as straightforward as possible.\"\r\n    );\r\n    public static sethLovesToTalk = new Project(\r\n        \"Seth Loves to Talk\",\r\n        \"My YouTube channel where make videos about particular topics I care about. This has been my primary creative outlet throughout quarantine and I've focused from video to video on trying to improve my design, writing, editing, animating, narrating, and general production skills. I've been very lucky to have received a lot of positive feedback, and have loved seeing how many people have enjoyed my videos. If you're looking for a place to start, I'd recommend watching my video on Vulfpeck or Animal Collective's My Girls music video.\"\r\n    );\r\n\r\n}","import React, { Component } from 'react';\r\nimport '../styles/App.scss';\r\n\r\nexport interface IProjectCardProps {\r\n    name: string;\r\n    description: string;\r\n    imgName: string;\r\n    altText: string;\r\n  }\r\n\r\nexport default class ProjectCard extends React.Component<any, IProjectCardProps> {\r\n    constructor(props:any) {\r\n        super(props);\r\n    }\r\n\r\n    render () {\r\n\r\n        return (\r\n            <div className=\"projectCard\">\r\n                <h1>{this.props.name}</h1>\r\n                <div className=\"gifHolder\">\r\n                    <img src={require(`../images/${this.props.imgName}`)} alt={this.props.altText}/>\r\n                </div>\r\n                <div className=\"descriptionHolder\">\r\n                    <p>{this.props.description}</p>\r\n                </div>\r\n            </div>  \r\n\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport ProjectStrings from '../resources/ProjectStrings';\r\nimport '../styles/App.scss';\r\nimport ProjectCard from './ProjectCard';\r\n\r\nexport default class WavePage extends React.Component<any, any> {\r\n    constructor(props:any) {\r\n        super(props);\r\n    }\r\n\r\n    displayErrorMessage(): void{\r\n    \r\n      };\r\n\r\n    render () {\r\n\r\n        return (\r\n            <div className=\"parallax\">\r\n                <div className=\"group\">\r\n                    <div className=\"parallax_layer parallax_layer-base\">\r\n                    </div>\r\n                    <div className=\"parallax_layer parallax_layer-01\">\r\n                    </div>\r\n                    <div className=\"parallax_layer parallax_layer-02\">\r\n                    </div>\r\n                    <div className=\"parallax_layer parallax_layer-03\">\r\n                    </div>\r\n                    <div className=\"parallax_layer parallax_layer-04\">\r\n                    </div>\r\n                </div>\r\n                <div className=\"content\">\r\n                    <ProjectCard name={ProjectStrings.lilBub.name} description={ProjectStrings.lilBub.description} imgName={'TestGif.gif'} altText={'Test'} />\r\n                    <ProjectCard name={ProjectStrings.newtonOpticks.name}   description={ProjectStrings.newtonOpticks.description} imgName={'TestGif.gif'} altText={'Test'} />\r\n                    <ProjectCard name={ProjectStrings.sethLovesPizza.name}  description={ProjectStrings.sethLovesPizza.description} imgName={'TestGif.gif'} altText={'Test'} />\r\n                    <ProjectCard name={ProjectStrings.sethLovesToTalk.name} description={ProjectStrings.sethLovesToTalk.description} imgName={'TestGif.gif'} altText={'Test'} />\r\n                </div>\r\n            </div>  \r\n\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\nimport WavePage from './components/WavePage';\nimport './styles/App.scss';\n\nclass App extends Component {\n\n  render():JSX.Element {\n    return (\n      <div className=\"App\">\n        <WavePage/>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}